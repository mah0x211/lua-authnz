--
-- DropboxCli
-- auto generated by tools/codegen.lua at Thu Mar  5 22:11:08 2015
--

-- 
-- NOTE: dropbox oauth2 API does not set a "application/json" to a 
--       content-type header.
--
local decodeJSON = require('cjson.safe').decode;
local function decodeResponse( res, ... )
    if res and res.body and type( res.body ) == 'string' then
        local body, err = decodeJSON( res.body );
        
        if body then
            res.body = body;
        end
    end
    
    return res, ...;
end

-- constants
local URI_GET_DATASTORE = "https://api.dropbox.com/1/datastores/get_datastore";
local URI_GET_SNAPSHOT = "https://api.dropbox.com/1/datastores/get_snapshot";
local URI_DELTA_LATEST_CURSOR = "https://api.dropbox.com/1/delta/latest_cursor";
local URI_MEDIA = "https://api.dropbox.com/1/media/auto/%s";
local URI_GET_OR_CREATE_DATASTORE = "https://api.dropbox.com/1/datastores/get_or_create_datastore";
local URI_FILEOPS_CREATE_FOLDER = "https://api.dropbox.com/1/fileops/create_folder";
local URI_PREVIEWS = "https://api-content.dropbox.com/11";
local URI_DELETE_DATASTORE = "https://api.dropbox.com/1/datastores/delete_datastore";
local URI_PUT_DELTA = "https://api.dropbox.com/1/datastores/put_delta";
local URI_REVISIONS = "https://api.dropbox.com/11";
local URI_CREATE_DATASTORE = "https://api.dropbox.com/1/datastores/create_datastore";
local URI_FILES_PUT = "https://api-content.dropbox.com/11";
local URI_AWAIT = "https://api.dropbox.com/1/datastores/await";
local URI_RESTORE = "https://api.dropbox.com/1/restore/auto/%s";
local URI_FILEOPS_COPY = "https://api.dropbox.com/1/fileops/copy";
local URI_FILEOPS_MOVE = "https://api.dropbox.com/1/fileops/move";
local URI_SHARES = "https://api.dropbox.com/1/shares/auto/%s";
local URI_COMMIT_CHUNKED_UPLOAD = "https://api-content.dropbox.com/1/commit_chunked_upload/auto/%s";
local URI_CHUNKED_UPLOAD = "https://api-content.dropbox.com/1https://api-content.dropbox.com/1";
local URI_FILEOPS_DELETE = "https://api.dropbox.com/1/fileops/delete";
local URI_ACCOUNT_INFO = "https://api.dropbox.com/1/account/info";
local URI_DELTA = "https://api.dropbox.com/1/delta";
local URI_METADATA = "https://api.dropbox.com/11";
local URI_LIST_DATASTORE = "https://api.dropbox.com/1/datastores/list_datastores";
local URI_SHARED_FOLDERS = "https://api.dropbox.com/11";
local URI_SEARCH = "https://api.dropbox.com/11";
local URI_GET_DELTAS = "https://api.dropbox.com/1/datastores/get_deltas";
local URI_FILES = "https://api-content.dropbox.com/11";
local URI_COPY_REF = "https://api.dropbox.com/11";
local URI_THUMBNAILS = "https://api-content.dropbox.com/11";
local URI_LONG_POLL_DELTA = "https://api-notify.dropbox.com/1https://api-notify.dropbox.com/1";

-- class
local DropboxCli = require('halo').class.DropboxCli;


function DropboxCli:__newindex( prop )
    error( ('attempted to assign to readonly property: %q'):format( prop ), 2 );
end


function DropboxCli:__index( prop )
    return protected( self ).token[prop];
end


function DropboxCli:init( cli, token, ... )
    if token then
        local own = protected( self );
        
        -- check token
        if type( token ) ~= 'table' then
            return nil, 'token must be table';
        elseif type( token.token_type ) ~= 'string' then
            return nil, 'token_type must be string';
        elseif type( token.access_token ) ~= 'string' then
            return nil, 'access_token must be string';
        end
        
        own.cli = cli;
        own.token = token;
        own.header = 'Bearer ' .. token.access_token;
        rawset( self, 'token', token );
        
        return self;
    end
    
    return nil, ...;
end

local function setAuthorization( opts, header )
    if type( opts ) ~= 'table' then
        opts = {
            header = {};
        };
    elseif type( opts.header ) ~= 'table' then
        opts.header = {};
    end
    
    opts.header['Authorization'] = header;
    
    return opts;
end


-- method
function DropboxCli:getDatastore( opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:get(
        URI_GET_DATASTORE,
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:getSnapshot( opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:get(
        URI_GET_SNAPSHOT,
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:deltaLatestCursor( opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:post(
        URI_DELTA_LATEST_CURSOR,
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:media( arg1, opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:post(
        URI_MEDIA:format( arg1 == nil and '' or tostring( arg1 ) ),
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:getOrCreateDatastore( opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:get(
        URI_GET_OR_CREATE_DATASTORE,
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:fileopsCreateFolder( opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:post(
        URI_FILEOPS_CREATE_FOLDER,
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:previews( arg1, opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:fmt(
        URI_PREVIEWS:format( arg1 == nil and '' or tostring( arg1 ) ),
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:deleteDatastore( opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:get(
        URI_DELETE_DATASTORE,
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:putDelta( opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:post(
        URI_PUT_DELTA,
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:revisions( arg1, opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:fmt(
        URI_REVISIONS:format( arg1 == nil and '' or tostring( arg1 ) ),
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:createDatastore( opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:get(
        URI_CREATE_DATASTORE,
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:filesPut( arg1, opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:fmt(
        URI_FILES_PUT:format( arg1 == nil and '' or tostring( arg1 ) ),
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:await( opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:get(
        URI_AWAIT,
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:restore( arg1, opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:post(
        URI_RESTORE:format( arg1 == nil and '' or tostring( arg1 ) ),
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:fileopsCopy( opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:post(
        URI_FILEOPS_COPY,
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:fileopsMove( opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:post(
        URI_FILEOPS_MOVE,
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:shares( arg1, opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:post(
        URI_SHARES:format( arg1 == nil and '' or tostring( arg1 ) ),
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:commitChunkedUpload( arg1, opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:post(
        URI_COMMIT_CHUNKED_UPLOAD:format( arg1 == nil and '' or tostring( arg1 ) ),
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:chunkedUpload( opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:uri(
        URI_CHUNKED_UPLOAD,
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:fileopsDelete( opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:post(
        URI_FILEOPS_DELETE,
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:accountInfo( opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:get(
        URI_ACCOUNT_INFO,
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:delta( opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:post(
        URI_DELTA,
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:metadata( arg1, opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:fmt(
        URI_METADATA:format( arg1 == nil and '' or tostring( arg1 ) ),
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:listDatastore( opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:get(
        URI_LIST_DATASTORE,
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:sharedFolders( arg1, opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:fmt(
        URI_SHARED_FOLDERS:format( arg1 == nil and '' or tostring( arg1 ) ),
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:search( arg1, opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:fmt(
        URI_SEARCH:format( arg1 == nil and '' or tostring( arg1 ) ),
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:getDeltas( opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:get(
        URI_GET_DELTAS,
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:files( arg1, opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:fmt(
        URI_FILES:format( arg1 == nil and '' or tostring( arg1 ) ),
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:copyRef( arg1, opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:fmt(
        URI_COPY_REF:format( arg1 == nil and '' or tostring( arg1 ) ),
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:thumbnails( arg1, opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:fmt(
        URI_THUMBNAILS:format( arg1 == nil and '' or tostring( arg1 ) ),
        setAuthorization( otps, own.header )
    ));
end

-- method
function DropboxCli:longPollDelta( opts )
    local own = protected(self);
    
    return decodeResponse( own.cli:uri(
        URI_LONG_POLL_DELTA,
        setAuthorization( otps, own.header )
    ));
end

return DropboxCli.exports;
