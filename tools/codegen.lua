--[[
  
  Copyright (C) 2015 Masatoshi Teruya

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
 
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
 
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  
  tool/codegen.lua
  lua-authnz
  
  Created by Masatoshi Teruya on 15/03/05.
  
--]]

-- module
local concat = table.concat;
-- template

local DEFAULT_DECODER = [[
local function decodeResponse( ... )
    return ...;
end
]];

local TMPL_NOTICE = [[
--
-- %s
-- auto generated by tools/codegen.lua at %s
--
]];
local TMPL_CONSTANTS = [[
-- constants
%s
]];

local TMPL_REQUEST_HEADER = [[
    opts.header[%q] = %q;]]

local TMPL_OAUTH2_CLASS = [[
-- class
local ${CLASS} = require('halo').class.${CLASS};


function ${CLASS}:__newindex( prop )
    error( ('attempted to assign to readonly property: %q'):format( prop ), 2 );
end


function ${CLASS}:__index( prop )
    return protected( self ).token[prop];
end


function ${CLASS}:init( cli, token )
    local own = protected( self );
    
    -- check token
    if type( token ) ~= 'table' then
        return nil, 'token must be table';
    elseif type( token.token_type ) ~= 'string' then
        return nil, 'token_type must be string';
    elseif type( token.access_token ) ~= 'string' then
        return nil, 'access_token must be string';
    end
    
    own.cli = cli;
    own.token = token;
    own.header = 'Bearer ' .. token.access_token;
    
    return self;
end

local function setAuthorization( opts, header )
    if type( opts ) ~= 'table' then
        opts = {
            header = {};
        };
    elseif type( opts.header ) ~= 'table' then
        opts.header = {};
    end
    
${REQUEST_HEADER}
    opts.header['Authorization'] = header;
    
    return opts;
end

]];

local TMPL_METHOD = [[
-- method
function ${CLASS}:${METHOD}( ${ARGS} )
    local own = protected(self);
    
    return decodeResponse( own.cli:${ACTION}(
        ${URI},
        setAuthorization( opts, own.header )
    ));
end
]];

local TMPL_EXPORT = [[
return ${CLASS}.exports;
]];

local TMPL_STRARG = [[arg%d == nil and '' or tostring( arg%d )]];

-- render template
local function render( tmpl, repl )
    return tmpl:gsub( '${([_%u]+)}', repl );
end


-- functions
local function toConstants( const, key, val )
    key = 'URI_' .. key:gsub('.',function( c )
        if c:find('%u') then
            return '_' .. c;
        end
        return c:upper();
    end);
    const[#const+1] = ('local %s = %s;'):format( key, val );
    
    return key;
end


local function genCli( tmpl, repl, className, baseURI, decl )
    local const = {};
    local uri, arg, strarg;
    
    -- declare methods
    for method, def in pairs( decl ) do
        for action, dest in pairs( def ) do
            repl['METHOD'] = method;
            repl['ACTION'] = action;
            uri = toConstants( 
                const, method, ('%q'):format( ( def.uri or baseURI ) .. dest )
            );
            -- check arguemnts
            arg = {};
            strarg = {};
            for i = 1, def.fmt or 0, 1 do
                arg[#arg+1] = 'arg' .. i;
                strarg[#strarg+1] = TMPL_STRARG:format( i, i );
            end
            
            -- create uri
            if #strarg > 0 then
                repl['URI'] = ('%s:format( %s )'):format(
                    uri, concat( strarg, ' .. ' )
                );
            else
                repl['URI'] = uri;
            end
            
            -- create arguments
            -- add opts argument at tail
            arg[#arg+1] = 'opts';
            repl['ARGS'] = concat( arg, ', ' );
            
            -- generate method
            tmpl[#tmpl+1] = render( TMPL_METHOD, repl );
            break;
        end
    end
    
    -- declare constants and export
    tmpl[3] = TMPL_CONSTANTS:format( concat( const, '\n' ) );
    tmpl[#tmpl+1] = render( TMPL_EXPORT, repl );
    
    -- to source code
    return concat( tmpl, '\n' );
end


local function genOAuth2Cli( className, decl )
    local repl = {
        ['CLASS'] = className
    };
    local headers = {};
    local tmpl = {};
    
    -- generate default header
    for k, v in pairs( decl.REQUEST_HEADER ) do
        headers[#headers+1] = TMPL_REQUEST_HEADER:format( k, v );
    end
    repl['REQUEST_HEADER'] = concat( headers, '\n' );
    
    -- declare class
    tmpl[1] = TMPL_NOTICE:format( className, os.date() );
    tmpl[2] = decl.RESPONSE_DECODER or DEFAULT_DECODER;
    tmpl[3] = '';
    tmpl[4] = render( TMPL_OAUTH2_CLASS, repl );
    
    return genCli( tmpl, repl, className, decl.BASE_URI, decl.API );
end


-- generate client code
local function toClassName( declName )
    local className = declName:gsub('^.', string.upper );
    return className .. 'Cli'
end

do
    local file, decl;
    
    for name, generator in pairs({
        dropbox = genOAuth2Cli
    }) do
        file = '../client/' .. name .. '.lua';
        decl = require('./decl_' .. name );
        decl = generator( toClassName( name ), decl );
        file = io.open( file, 'w' );
        file:write( decl );
        file:close();
    end
end

